'use strict';

// окружение
// область видимости - это то, как интерпретатор в разых местах кода видит наши идентификаторы (перменные, константы и т.д.)
// область видимости - означает, где компоненты доступны

// лексическая область видимости - механизм поиска значений (смотрим в текущей области, если нет, то идем на уровень выше, и так далее)

// const x = 29; // глобальная константа

// const multiplier = num => {
//     const x = 10; // локальная константа
//     return num * x;
// };

// console.log(x); // 29


// let a = 0;

// const changer = () => {
//     a++;
// };

// console.log(a); // 0
// changer();
// console.log(a); // 1

// локальное недоступно снаружи. но глобальное доступно везде. даже внутри чего-то
// храним константы, переменные только там где им место!


/* // лексическая область видимости
let a = 7;
let b = 10;

const multiplier = () => {
    let a = 5; // локальная переменная
    return a * b;
};

console.log(multiplier()); // 50 */


/* //замыкание - функция, которая запоминает внешние идентификаторы, используемые внутри
const creatPrinter = () => {
    const name = "King";

    const printName = () => {
        console.log(name);
    };
    return printName;
};

const myPrinter = creatPrinter();
myPrinter();  //king - запомненное значение, при том что область видимости, где оно было задано не  существует

// у функции printName нет локальных компонентов, но у нее есть доступ к области видимости, где она сама находится, внешней области, где задана константа name.
//у функции printName нет локальных компонентов, но у нее есть доступ к области видимости, где она сама находится, внешней области, где задана константа name */

/* //ЗАДАЧА идеальные числа. функция, которая принимает число и возвращает true, если оно совершенное, false - в ином случае. 
// Совершеное число - положительное целое число, равное сумме его положительных делителей.
// Например, 6 - идеальное число, потому что 6 = 1 + 2 + 3

const isPerfectNumber = (num) => {
    let sum = 0;
    let remainder;
    for ( let i = 1; i <=num -1; i++) {
        remainder = num%i;
        if (remainder ===0) {
            sum +=i;
        }
    }
    if(sum = num) {
        return true;
    } 
    else return false;
};

console.log(isPerfectNumber(4096)); */

/* //решение д/з

const primeNumber=(n)=> {
    let result = "1";    //еденицу сразу вписываем, ее проверять смысла нет
    mark:                //подсмотрел как сделать метку в интернете
    for(let i = 2; i <= n; i++){
       for(let j = 2; j < i; j++){
          if (i % j === 0){
             continue mark;   //так как в этом случае делать ничего не надо, то просто идем за следующим i, break без метки делает ошибку вылазит 9 15 и тп
          }    
       }
          result+=" "+`${i}`;
    }
    return result; 
 };
 
 console.log(primeNumber(1000)); */


 //задача. записать ф-цию которая делает заглавной первую букву каждого слова в предложении.
 // пример: lettersUpper('hello, world!'); // Hello, World!

 const lettersUpper = str => {
    let result = "";
    for(let i = 0; i < str.length; i++ ) { // считаем с нуля всегда,индексация элементов до тех пор пока i меньше длины строки
        const shouldBeBig = (i === 0 || str[i - 1] === '');
        result = result + shouldBeBig ? toUpperCase(str[i]) : str[i];
    }
    return result;
};
console.log(lettersUpper("hello world!"));

